{% extends 'base.html' %} {% load static %} {% block content %}
<div class="page-inner">
    <h4 class="page-title">Chart.js</h4>
    <div class="page-category">
        Simple yet flexible JavaScript charting for designers & developers. Please checkout their
        <a href="https://www.chartjs.org/" target="_blank">full documentation</a>.
    </div>
    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <div class="card-title">Line Chart</div>
                </div>
                <div class="card-body">
                    <div class="chart-container">
                        <canvas id="lineChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <div class="card-title">Bar Chart</div>
                </div>
                <div class="card-body">
                    <div class="chart-container">
                        <canvas id="barChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <div class="card-title">Pie Chart</div>
                </div>
                <div class="card-body">
                    <div class="chart-container">
                        <canvas id="pieChart" style="width: 50%; height: 50%"></canvas>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <div class="card-title">Doughnut Chart</div>
                </div>
                <div class="card-body">
                    <div class="chart-container">
                        <canvas id="doughnutChart" style="width: 50%; height: 50%"></canvas>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <div class="card-title">Radar Chart</div>
                </div>
                <div class="card-body">
                    <div class="chart-container">
                        <canvas id="radarChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <div class="card-title">Bubble Chart</div>
                </div>
                <div class="card-body">
                    <div class="chart-container">
                        <canvas id="bubbleChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <div class="card-title">Multiple Line Chart</div>
                </div>
                <div class="card-body">
                    <div class="chart-container">
                        <canvas id="multiplelineChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <div class="card-title">Multiple Bar Chart</div>
                </div>
                <div class="card-body">
                    <div class="chart-container">
                        <canvas id="multipleBarChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-12">
            <div class="card">
                <div class="card-header">
                    <div class="card-title">Chart with Legends</div>
                </div>
                <div class="card-body">
                    <div class="card-sib">
                        Sometimes you need a very complex legend. It makes sense to generate an HTML legend.
                        Charts provide a generateLegend prototype that returns an HTML string for the legend.
                    </div>
                    <div class="chart-container">
                        <canvas id="htmlLegendsChart"></canvas>
                    </div>
                    <div id="myChartlegend"></div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %} {% block chart %}

<script>
var lineChart = document.getElementById("lineChart").getContext("2d"), 
    barChart = document.getElementById("barChart").getContext("2d"), 
    pieChart document.getElementById("pieChart").getContext("2d"), 
    doughnutChart = document.getElementById("doughnut Chart").getContext("2d"), 
    radarChart = document.getElementById("radarChart").getContext("2d"), bubbleChart = document.getElementById("bubbleChart").getContext("2d"),
    multipleLineChart = document.getElementById("multipleLineChart").getContext("2d"), 
    multipleBarChart = document.getElementById("multipleBarChart").getContext("2d"), 
    htmlLegendsChart = document.getElementById("htmlLegendsChart").getContext("2d");

var myLineChart = new Chart(lineChart, {
    type: "line",
    data: {
        labels: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        datasets: [{
            label: "Active Users",
            borderColor: "#1d7af3",
            pointBorderColor: "#FFF",
            pointBackgroundColor: "#1d7af3",
            pointBorderWidth: 2,
            pointHoverRadius: 4,
            pointHoverBorderWidth: 1,
            pointRadius: 4,
            backgroundColor: "transparent",
            fill: true,
            borderWidth: 2,
            data: [542, 480, 430, 550, 530, 453, 380, 434, 568, 610, 700, 900]
        }]
    },
    options: {
        responsive: true,
        maintainAspectRatio: false,
        legend: {
            position: "bottom",
            labels: {
                padding: 10,
                fontColor: "#1d7af3"
            }
        },
        tooltips: {
            bodySpacing: 4,
            mode: "nearest",
            intersect: false,
            position: "nearest",
            xPadding: 10,
            yPadding: 10,
            caretPadding: 10
        },
        layout: {
            padding: {
                left: 15, right: 15, top: 15, bottom: 15
            }
        }
    }
});

var myBarChart = new Chart(barChart, {
    type: "bar",
    data: {
        labels: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        datasets: [{
            label: "Sales",
            backgroundColor: "rgb(23, 125, 255)",
            borderColor: "rgb(23, 125, 255)",
            data: [3, 2, 9, 5, 4, 6, 4, 6, 7, 8, 7, 4]
        }]
    },
    options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
            yAxes: [{
                ticks: {
                    beginAtZero: true
                }
            }]
        }
    }
});

var myPieChart = new Chart(pieChart, {
    type: "pie",
    data: {
        labels: ["New Visitors", "Subscribers", "Active Users"],
        datasets: [{
            data: [50, 35, 151],
            backgroundColor: ["#1d7af3", "#f3545d", "#fdaf4b"],
            borderWidth: 0
        }]
    },
    options: {
        responsive: true,
        maintainAspectRatio: false,
        legend: {
            position: "bottom",
            labels: {
                fontColor: "rgb(154, 154, 154)",
                fontSize: 11,
                usePointStyle: true,
                padding: 20
            }
        },
        pieceLabel: {
            render: "percentage",
            fontColor: "white",
            fontSize: 14
        },
        tooltips: false,
        layout: {
            padding: {
                left: 20, right: 20, top: 20, bottom: 20
            }
        }
    }
});

var myDoughnutChart = new Chart(doughnutChart, {
    type: "doughnut",
    data: {
        labels: ["Red", "Yellow", "Blue"],
        datasets: [{
            data: [10, 20, 30],
            backgroundColor: ["#f3545d", "#fdaf4b", "#1d7af3"]
        }]
    },
    options: {
        responsive: true,
        maintainAspectRatio: false,
        legend: {
            position: "bottom"
        },
        layout: {
            padding: {
                left: 20, right: 20, top: 20, bottom: 20
            }
        }
    }
});

var myRadarChart = new Chart(radarChart, {
    type: "radar",
    data: {
        labels: ["Running", "Swimming", "Eating", "Cycling", "Jumping"],
        datasets: [
            {
                label: "Team 1",
                data: [20, 10, 30, 2, 30],
                borderColor: "#1d7af3",
                backgroundColor: "rgba(29, 122, 243, 0.25)",
                pointBackgroundColor: "#1d7af3",
                pointHoverRadius: 4,
                pointRadius: 3
            },
            {
                label: "Team 2",
                data: [10, 20, 15, 30, 22],
                borderColor: "#716aca",
                backgroundColor: "rgba(113, 106, 202, 0.25)",
                pointBackgroundColor: "#716aca",
                pointHoverRadius: 4,
                pointRadius: 3
            }
        ]
    },
    options: {
        responsive: true,
        maintainAspectRatio: false,
        legend: {
            position: "bottom"
        }
    }
});

var myBubbleChart = new Chart(bubbleChart, {
    type: "bubble",
    data: {
        datasets: [
            {
                label: "Car",
                data: [
                    { x: 25, y: 17, r: 25 },
                    { x: 30, y: 25, r: 28 },
                    { x: 35, y: 30, r: 8 }
                ],
                backgroundColor: "#716aca"
            },
            {
                label: "Motorcycles",
                data: [
                    { x: 10, y: 17, r: 7 },
                    { x: 30, y: 10, r: 20 },
                    { x: 35, y: 20, r: 10 }
                ],
                backgroundColor: "#fdaf3"
            }
        ]
    },
    options: {
        responsive: true,
        maintainAspectRatio: false,
        legend: {
            position: "bottom"
        },
        scales: {
            yAxes: [{
                ticks: {
                    beginAtZero: true
                }
            }],
            xAxes: [{
                ticks: {
                    beginAtZero: true
                }
            }]
        }
    }
});

var myMultipleLineChart = new Chart(multipleLineChart, {
    type: "line",
    data: {
        labels: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        datasets: [
            {
                label: "Python",
                borderColor: "#1733",
                pointBorderColor: "#FFF",
                pointBackgroundColor: "#1d7af3",
                pointBorderWidth: 2,
                pointHoverRadius: 4,
                pointHoverBorderWidth: 1,
                pointRadius: 4,
                backgroundColor: "transparent",
                fill: true,
                borderWidth: 2,
                data: [30, 45, 45, 68, 69, 90, 100, 158, 177, 200, 245, 256]
            },
            {
                label: "Unnamed Dataset",
                borderColor: "#590",
                pointBorderColor: "#arre",
                pointBackgroundColor: "#95",
                pointBorderWidth: 2,
                pointHoverRadius: 4,
                pointHoverBorderWidth: 1,
                pointRadius: 4,
                backgroundColor: "transparent",
                borderWidth: 2,
                data: [10, 20, 55, 75, 80, 40, 59, 35, 23, 107, 60, 87]
            },
            {
                label: "Buy",
                borderColor: "#345",
                pointBorderColor: "#FFF",
                pointBackgroundColor: "#3545",
                pointBorderWidth: 2,
                pointHoverRadius: 4,
                pointHoverBorderWidth: 1,
                pointRadius: 4,
                backgroundColor: "transparent",
                borderWidth: 2,
                data: [10, 30, 58, 79, 90, 105, 117, 140, 185, 210, 185, 194]
            }
        ]
    },
    options: {
        responsive: true,
        maintainAspectRatio: false,
        legend: {
            position: "top"
        },
        tooltips: {
            bodySpacing: 4,
            mode: "nearest",
            intersect: false,
            position: "nearest",
            xPadding: 10,
            yPadding: 10,
            caretPadding: 10
        },
        layout: {
            padding: {
                left: 15, right: 15, top: 15, bottom: 15
            }
        }
    }
});

var myMultipleBarChart = new Chart(multipleBarChart, {
    type: "bar",
    data: {
        labels: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        datasets: [
            {
                label: "First time visitors",
                backgroundColor: "#59d05d",
                borderColor: "#59d05d",
                data: [195, 100, 112, 101, 144, 159, 178, 156, 188, 190, 210, 245]
            },
            {
                label: "Visitors",
                backgroundColor: "#fdaf4b",
                borderColor: "#fdaf4b",
                data: [145, 256, 244, 233, 210, 279, 287, 253, 287, 299, 312, 356]
            },
            {
                label: "Pageview",
                backgroundColor: "#177dff",
                borderColor: "#177dff",
                data: [185, 279, 273, 287, 234, 312, 322, 286, 301, 320, 346, 399]
            }
        ]
    },
    options: {
        responsive: true,
        maintainAspectRatio: false,
        legend: {
            position: "bottom"
        },
        title: {
            display: true,
            text: "Traffic Stats"
        },
        tooltips: {
            mode: "index",
            intersect: false
        },
        scales: {
            xAxes: [{
                stacked: true
            }],
            yAxes: [{
                stacked: true
            }]
        }
    }
});

// Chart with HTML Legends
var gradientStroke = htmlLegendsChart.createLinearGradient(500, 0, 100, 0);
gradientStroke.addColorStop(0, "#177dff");
gradientStroke.addColorStop(1, "#80b6f4");

var gradientFill = htmlLegendsChart.createLinearGradient(500, 0, 100, 0);
gradientFill.addColorStop(0, "rgba(23, 125, 255, 0.7)");
gradientFill.addColorStop(1, "rgba(128, 182, 244, 0.3)");

var gradientStroke2 = htmlLegendsChart.createLinearGradient(500, 0, 100, 0);
gradientStroke2.addColorStop(0, "#f3545d");
gradientStroke2.addColorStop(1, "#ff8990");

var gradientFill12 = htmlLegendsChart.createLinearGradient(500, 0, 100, 0);
gradientFill12.addColorStop(0, "rgba(243, 84, 93, 0.7)");
gradientFill12.addColorStop(1, "rgba(255, 137, 144, 0.3)");

var gradientStroke3 = htmlLegendsChart.createLinearGradient(500, 0, 100, 0);
gradientStroke3.addColorStop(0, "#fdaf4b");
gradientStroke3.addColorStop(1, "#ffc478");

var gradientFill3 = htmlLegendsChart.createLinearGradient(500, 0, 100, 0);
gradientFill3.addColorStop(0, "rgba(253, 175, 75, 0.7)");
gradientFill3.addColorStop(1, "rgba(255, 196, 120, 0.3)");

var myHtmlLegendsChart = new Chart(htmlLegendsChart, {
    type: "line",
    data: {
        labels: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        datasets: [
            {
                label: "Subscribers",
                borderColor: gradientStroke2,
                pointBackgroundColor: gradientStroke2,
                pointRadius: 0,
                backgroundColor: gradientFill12,
                legendColor: "#345",
                fill: true,
                borderWidth: 1,
                data: [154, 184, 175, 203, 210, 231, 240, 278, 252, 312, 320, 374]
            },
            {
                label: "New Visitors",
                borderColor: gradientStroke3,
                pointBackgroundColor: gradientStroke3,
                pointRadius: 0,
                backgroundColor: gradientFill,
                legendColor: "#d4b",
                fill: true,
                borderWidth: 1,
                data: [256, 230, 245, 287, 240, 250, 230, 295, 331, 431, 456, 521]
            },
            {
                label: "Active User",
                borderColor: gradientStroke,
                pointBackgroundColor: gradientStroke,
                pointRadius: 0,
                backgroundColor: gradientFill,
                legendColor: "#fff",
                fill: true,
                borderWidth: 1,
                data: [542, 480, 430, 550, 530, 453, 380, 434, 568, 610, 700, 900]
            }
        ]
    },
    options: {
        responsive: true,
        maintainAspectRatio: false,
        legend: {
            display: false
        },
        tooltips: {
            bodySpacing: 4,
            mode: "nearest",
            intersect: false,
            position: "nearest",
            xPadding: 10,
            yPadding: 10,
            caretPadding: 10
        },
        layout: {
            padding: {
                left: 15, right: 15, top: 15, bottom: 15
            }
        },
        scales: {
            yAxes: [{
                ticks: {
                    fontColor: "rgba(0,0,0,0.5)",
                    fontStyle: "500",
                    beginAtZero: false,
                    maxTicksLimit: 5,
                    padding: 20
                },
                gridLines: {
                    drawTicks: false,
                    display: false
                }
            }],
            xAxes: [{
                gridLines: {
                    zeroLineColor: "transparent"
                },
                ticks: {
                    padding: 20,
                    fontColor: "rgba(0,0,0,0.5)",
                    fontStyle: "500"
                }
            }]
        }
    },
    legendCallback: function (chart) {
        var text = [];
        text.push('<ul class="chart-id-legend html-legend">');
        for (var i = 0; i < chart.data.datasets.length; i++) {
            text.push('<li><span style="background-color:' + chart.data.datasets[i].legendColor + '"></span>');
            if (chart.data.datasets[i].label) {
                text.push(chart.data.datasets[i].label);
            }
            text.push('</li>');
        }
        text.push('</ul>');
        return text.join("");
    }
});

var myLegendContainer = document.getElementById("myChartLegend");
myLegendContainer.innerHTML = myHtmlLegendsChart.generateLegend();

var legendItems = myLegendContainer.getElementsByTagName("li");
for (var i = 0; i < legendItems.length; i++) {
    legendItems[i].addEventListener("click", legendClickCallback, false);
}
<script>
{% endblock %}


1 endblock ) ( block chart 4)
<script>
function loadchartData() {
// pleChart
fetch("/chart/")
.then((response) response.json()) .then((data) |
var severityLevels Object.keys(datal
2024-03
rev00
var counts = Object.values(data);
var
piechart = document.getüleentayld("piechart).getContext("d");
console.log("call":
new Chart (piechart,
type: "pie",
datal
datasets: [
1.
1.
data: counts,
backgroundColors (1d7a3", "#E3545", "#dafb",
borderWidth: 0,
Labels: severityLevels,
option: [
responsive: true,
maintainspectRatio: false,
Legend: (
position: "bottom",
labels: |
1.
fontColor: "rgb (154, 154, 1541",
Ioni: 11,
usePointStyle: true,
padding: 20,
pielabel:
render: "percentage", fontColor: white",
tooltiportal.
Layout: {
padding: (
left: 20,
right: 20, top: 20,
bottom: 20.
1.
31
112
.catch((error)->console.error("Error:", error)
loadChart Date D
</script>


def LineCountbyMonth (request):
current_year
datetime.now(). year
result = {month: 0 for month in range (1, 13))
incidents_per_month - Incident.objects.filter (date_time_year-current_year) \
.values_list('date_time', flat=True)
# Counting the number of incidents per month
for date_time in incidents_per_month:
month= date_time.month
result [month] += 1
# If you want to convert month numbers to month names, you can use a dictionary mapping month_names = {
}
1: 'Jan', 2: 'Feb', 3: 'Mar', 4: 'Apr', 5: 'May', 6: 'Jun',
7: 'Jul', 8: 'Aug', 9: 'Sep', 10: 'Oct', 11: 'Nov', 12: 'Dec'
result_with_month_names = {
month_names [int (month)]: count for month, count in result.items()}
return JsonResponse (result_with_month_names)


//lineChart
fetch("/lineChart/")
.then((response)-> response.json())
.then((result_with_month_names) => {
var months
Object.keys(result_with_month_names);
var counts = Object.values (result_with_month_names);
var lineChart = document.getElementById("lineChart").getContext("2d");
new Chart (lineChart, (
type: "line",
data: (
labels: "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct",
"Nov", "Dec"],
datasets: [
(
label: "Active Users", borderColor: "#1d7af3", pointBorderColor: "#FFF",
point BackgroundColor: "#1d7af3", pointBorderWidth: 2,
pointHoverRadius: 4,
pointHoverBorderWidth: 1, pointRadius: 4,
backgroundColor: "transparent", fill true,
borderWidth: 2,
data: counts,
}}
"
1.
}
options: (
responsive: true,
maintainAspectRatio: false,
legend: (
position: "bottom",
labels:
padding: 10,
fontColor: "#1d7af3",
tooltips:
1.
bodySpacing: 4,
mode: "nearest",
intersect: 0,
position: "nearest",
xPadding: 10,
yPadding: 10,
caret Padding: 10,
layout:(
padding: left: 15, right: 15, top: 15, bottom: 15 1.
.catch((error) -> console.error("Error:", error));



def MultilineIncidentTop3Country(request):
query='''
SELECT
fl.country,
strftime('m', fi.date_time) AS month, 
COUNT (fi.id) AS incident_count
FROM
fire_incident fi
JOIN
fire_locations fl ON fi.location_id = fl.id
WHERE
fl.country IN (
    SELECT
    fl_top.country
    FROM
    fire incident fi_top
    JOIN
    fire_locations fl_top ON fi_top.location_id = fl_top.id
    WHERE
    strftime('Y', fi_top.date_time)=strftime('%Y', 'now')
    GROUP BY
    fl top.country
    ORDER BY
    COUNT (fi_top.id) DESC
    LIMIT 3
)
AND strftime('%Y', fi.date_time)=strftime('Y', 'now')
GROUP BY
fl.country, month
ORDER BY
fl.country, month;
'''


with connection.cursor() as cursor:
cursor.execute(query)
rows = cursor.fetchall (1
# Initialize a dictionary to store the result
#Initialize a set of months from January to December 
months = set (str(i).fill(2) for i in range(1, 131)
#Loop through the query results
for row in rows:
country row[0]
month row[1]
total incidents = row(2)
#If the country is not in the result dictionary, initialize it with all months set to if country not in result:
result[country] (month: 0 for month in months)
Update the incident count for the corresponding month result (country) (month) = total incidents
# Ensure there are always 3 countries in the result
while len(result) < 3:
# Placeholder name for missing countries
missing country = "Country (len(result) + 1)* result[missing_country] = (month: 0 for month in months)
for country in result
result[country]= dict(sorted(result[country].items()])
return JsonResponse(result)


//multiline
fetch/multilineChart/")
.then((response) => response.json()) .then((result_with_month_name} => {
var countries = Object.keys(result_with_month_names); // Extract incident counts for each country
var incidentCounts = []
var incidentCounts2-
var incidentCount
// Sort function to sort object keys by month
function sortObjectKeys(obj) {
return object.keys lobj).sort(la, b) = parseInt(a) parseInt(b)
!! Check if data for each country exists and extract incident counts if (countries.length >= 1) {
var countryl_data = result_with_month_names[countries[0]]; var sortedieval
incidentCounts
sortObjectkeys(countryl_data);
sortedneysi.map(key) countryl_data[key]);
if (countries.length >= 2) {
var country data result with month names(countries[1]); var sortediaya2 sortObjectkeys(country2_data);
incidentCount 2 sortedleys2.map(key) country2_data[key]);
if (countries.length > 3
var country data result_with_month_names(countries [2]); var sortedreys3 incidentCounta
sortobjectKeys(country3_data);
= sortedleys).map([key] => country)_data[key]);
var multipleLineChart
document.getElementById("multipleLineChart).getContext("2");
new Chart Imultiplelinethart, (
type: "line".
data:
_labels: ["Jan", "Feb", "Mac", "Apr", "day", "Jan", "Jul", "Aug", "Sep", "Oct",
"Slav", "Dec"),
dataseta:
label: countries(0). borderColor: "#1f3",
pointBorderColor: "#FFF",
pointBackgroundColor: "#1d7a3",
pointBorderWidth: 2,
pointHoverBadius: 4,
pointHoverBorderWidth: 1,
pointRadius: 4,
backgroundColor: "transparent",
borderWidth: 2,
data: incidentCounts,
label: countries(1), borderColor: "#5905", pointBorderColor: "#FFF",
pointBackgroundColor: "#5905",
pointBorderWidth: 2,
pointHoverBadius: 4,
pointHoverBorderWidth: 1, pointRadius: 4,
backgroundColor: "transparent", fill true,
borderWidth: 2,
data: incidentCounts2,
label: countries [2], borderColor: "#f3545d", point BorderColor: "#FFF", point BackgroundColor: "#f3545d", point BorderWidth: 2,
point HoverRadius: 4,
point HoverBorderWidth: 1, pointRadius: 4,
backgroundColor: "transparent", fill: true,
borderWidth: 2,
data: incidentCounts3,
options: {
},
responsive: true,
maintainAspect Ratio: false,
legend: (
},
position: "top",
tooltips: (
},
bodySpacing: 4,
mode: "nearest",
intersect: 0,
position: "nearest", xPadding: 10,
yPadding: 10,
caret Padding: 10,
layout: (
padding: left: 15, right: 15, top: 15, bottom: 15 },
.catch((error) => console.error("Error:", error));


def multipleBarbySeverity (request):
query='''
SELECT
fi.severity level,
strftime('\m', fi.date_time) AS month, 
COUNT (fi.id) AS incident_count
FROM
fire_incident fi
GROUP BY fi.severity level, month
'''
with connection.cursor() as cursor:
cursor.execute(query)
rows = cursor.fetchall()
result = {}
months set (str(i).zfill (2) for i in range(1, 13))
for row in rows:
level= str(row[0]) #Ensure the severity level is a string month
row[1]
total incidents = row[2]
if level not in result:
result[level] (month: 0 for month in months)
result [level] [month] = total_incidents
Sort months within each severity level
for level in result:
result[level] = dict(sorted(result[level].items()))
return JsonResponse (result)


// multiBarChart
fetch("/multiBarChart/")
.then((response) => response.json()) .then((result) => {
var severitylevel = Object.keys(result); // Extract incident counts for each country var incidentCount_major = [];
var incidentCounts_minor
[];
var incidentCounts_moderate = [];
var months
Object.keys(result);
var counts = Object.values (result);
// Sort function to sort object keys by month function sortObject Keys (obj) (
}
return Object.keys(obj).sort((a, b) => parseInt(a) - parseInt(b));
// Check if data for each country exists and extract incident counts if (severitylevel.length > 1) {
}
var sl1_data = result[severitylevel[0]];
var sortedKeysl sortObjectKeys (sll_data);
incidentCount_major sortedKeys1.map((key) => sl1_data[key]);
if (severitylevel.length >= 2) {
}
var s12_data = result (severitylevel [1]];
var sortedKeys2 - sortObjectKeys (s12_data);
incidentCount_minor sortedKeys2.map((key) => s12_data[key]);
if (severitylevel.length >= 3) {
var s13_data = result (severitylevel[2]];
var sortedKeys3 = sortObjectKeys (s13_data);
incidentCount_moderate = sortedKeys3.map((key) => s13_data[key]);

var multipleBarChart = document.getElementById("multipleBarChart").getContext("24");
new Chart (multipleBarChart,
type: "bar",
data: {
labels: ("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct",
"Nov", "Dec"],
dataseta: I
(
label: "Minor Fire",
backgroundColor: "#59d05d", borderColor: "#5905", data: incidentCount minor,
label: "Moderate Fire", backgroundColor: "#daf4b", borderColor: "#fdafb",
data: incidentCount_moderate,
}
1.
".
label: "Major Fire",
backgroundColor: "#177dff", borderColor: "#177dff", data: incidentCount_major,
options: (
responsive: true,
maintainAspectRatio: false,
legend: (
position: "bottom",
title: (
".
display: true,
text: "Fire Incidents by Severity Level",
tooltips: (
1.
mode: "index",
intersect: false,
responsive: true,
scales: (
xAxes: [
stacked: true,
1. yaxes: [
(
stacked: true,
1.
.catch((error)->console.error("Error:", error));


// pieChart 
fetch("/chart/")
.then((response) => response.json()) .then((data) => {
var severityLevels = Object.keys (data);
var counts = Object.values (data);
var piechart = document.getElementById("pieChart").getContext("2d"}}
console.log("call");
new Chart (pieChart, [
type: "pie",
data:
datasets: [
data: counts,
backgroundColor: "#1d7f3", "#3545d", "#daf4b"),
borderWidth: 0,
J.
1.
labels: severityLevels,
options: (
responsive: true,
maintainAspectRatio: false,
Legend:
position: "bottom",
labels: (
J.
}.
fontColor: rgb(154, 154, 154),
FontSize: 11,
usePointStyle: true,
padding: 20,
pieceLabel: (
1.
render: "percentage", fontColor: "white", FontSize: 14,
tooltips: false,
Layout: {
padding: {
left: 20,
right: 20, top: 20,
bottom: 20,
}}
.catch((error) -> console.error("Error:", error));


def PieCountbySeverity (request):
query='''
SELECT severity level, 
COUNT(*) as count FROM fire_incident
GROUP BY aeverity_level
'''
data = {}
with connection.cursor() as cursor:
cursor.execute (query)
IOWS cursor.fetchall()
if rows:
# Construct the dictionary with severity level as keys and count as values 
data = {severity: count for severity, count in rows}
else:
data = {}
return JsonResponse(data)

def PieCountbySeverity(request):
    query = '''
    SELECT severity level, COUNT(*) as count 
    FROM fire_incident
    GROUP BY severity_level
    '''
    data = {}
    with connection.cursor() as cursor:
        cursor.execute(query)
        rows = cursor.fetchall()
        if rows:
            # Construct the dictionary with severity level as keys and count as values 
            data = {severity: count for severity, count in rows}
        else:
            data = {}
    return JsonResponse(data)
